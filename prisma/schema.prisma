// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @unique @default(uuid())
  name          String      @unique
  email         String      @unique
  password      String?
  image         String
  role          String      @default("user")
  posts         Post[]
  comments      Comment[]
  receivedLikes Like[]
  followers     Follow[]    @relation("Following")
  followings    Follow[]    @relation("Follower")
  savedPosts    SavedPost[]
}

model Post {
  id          String      @id @unique @default(uuid())
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  category    String      @default("general")
  title       String      @unique
  content     String
  image       String
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  publishedAt DateTime?
  updatedAt   DateTime?   @updatedAt
  comments    Comment[]
  likes       Like[]
  savedBy     SavedPost[]
  tags        PostTag[]
}

model Comment {
  id        String    @id @unique @default(uuid())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  content   String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  replyToId String?
  replyTo   Comment?  @relation("Replies", fields: [replyToId], references: [id])
  replies   Comment[] @relation("Replies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
}

model Like {
  id        String   @id @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Follow {
  id              String   @id @unique @default(uuid())
  followerId      String
  follower        User     @relation("Follower", fields: [followerId], references: [id])
  followingUserId String
  followingUser   User     @relation("Following", fields: [followingUserId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([followerId, followingUserId])
}

model SavedPost {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Tag {
  id    String    @id @unique @default(uuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}
